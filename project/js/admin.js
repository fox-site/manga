// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è Light Fox Manga —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º fallback
(function() {
    'use strict';

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∫–∏
    let currentSection = 'dashboard';
    let currentUser = null;
    let isLoggedIn = false;
    let isSupabaseMode = false;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Supabase
    async function checkSupabaseAvailability() {
        try {
            if (!window.supabase) {
                console.log('üîÑ Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                return false;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            const { data, error } = await window.supabase.auth.getSession();
            
            if (error && error.message.includes('fetch')) {
                console.log('üîÑ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                return false;
            }

            console.log('‚úÖ Supabase –¥–æ—Å—Ç—É–ø–µ–Ω');
            return true;
        } catch (error) {
            console.log('üîÑ –û—à–∏–±–∫–∞ Supabase, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error.message);
            return false;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    async function checkAdminAccess() {
        try {
            isSupabaseMode = await checkSupabaseAvailability();

            if (isSupabaseMode) {
                // Supabase —Ä–µ–∂–∏–º
                const { data: { user } } = await window.supabase.auth.getUser();
                
                if (!user) {
                    showLoginForm();
                    return false;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –≤ –±–∞–∑–µ
                const { data: profile, error } = await window.supabase
                    .from('users')
                    .select('is_admin, username')
                    .eq('id', user.id)
                    .single();

                if (error || !profile?.is_admin) {
                    showAccessDenied();
                    return false;
                }

                currentUser = { ...user, profile };
                isLoggedIn = true;
                return true;
            } else {
                // Fallback —Ä–µ–∂–∏–º - –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
                const savedUser = localStorage.getItem('admin_user');
                if (savedUser) {
                    try {
                        currentUser = JSON.parse(savedUser);
                        isLoggedIn = true;
                        return true;
                    } catch (e) {
                        localStorage.removeItem('admin_user');
                    }
                }

                showLoginForm();
                return false;
            }
        } catch (error) {
            console.error('Admin access check error:', error);
            showLoginForm();
            return false;
        }
    }

    // –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
    function showLoginForm() {
        document.body.innerHTML = `
            <style>
                * {
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }

                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    padding: 20px;
                }

                .login-container {
                    background: white;
                    border-radius: 20px;
                    padding: 40px;
                    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                    width: 100%;
                    max-width: 400px;
                    text-align: center;
                }

                .login-title {
                    font-size: 2rem;
                    font-weight: 800;
                    margin-bottom: 10px;
                    background: linear-gradient(135deg, #ff8a50, #ff7043);
                    -webkit-background-clip: text;
                    -webkit-text-fill-color: transparent;
                    background-clip: text;
                }

                .login-subtitle {
                    color: #666;
                    margin-bottom: 30px;
                    font-size: 1.1rem;
                }

                .login-form {
                    display: flex;
                    flex-direction: column;
                    gap: 20px;
                }

                .login-input {
                    padding: 15px 20px;
                    border: 2px solid #e0e0e0;
                    border-radius: 12px;
                    font-size: 1rem;
                    transition: all 0.3s ease;
                    background: #f8f9fa;
                }

                .login-input:focus {
                    outline: none;
                    border-color: #ff8a50;
                    box-shadow: 0 0 0 3px rgba(255, 138, 80, 0.1);
                    background: white;
                }

                .login-btn {
                    padding: 15px;
                    background: linear-gradient(135deg, #ff8a50, #ff7043);
                    color: white;
                    border: none;
                    border-radius: 12px;
                    font-size: 1rem;
                    font-weight: 600;
                    cursor: pointer;
                    transition: all 0.3s ease;
                }

                .login-btn:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 10px 20px rgba(255, 138, 80, 0.3);
                }

                .login-btn:disabled {
                    opacity: 0.7;
                    cursor: not-allowed;
                    transform: none;
                }

                .demo-info {
                    margin-top: 25px;
                    padding: 20px;
                    background: rgba(16, 185, 129, 0.1);
                    border-radius: 12px;
                    border: 1px solid rgba(16, 185, 129, 0.3);
                }

                .demo-info h4 {
                    color: #059669;
                    margin-bottom: 15px;
                    font-size: 1.1rem;
                }

                .demo-credentials {
                    display: grid;
                    gap: 10px;
                    text-align: left;
                }

                .credential-row {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding: 8px 12px;
                    background: white;
                    border-radius: 8px;
                    border: 1px solid rgba(16, 185, 129, 0.2);
                }

                .credential-label {
                    font-weight: 600;
                    color: #374151;
                }

                .credential-value {
                    font-family: 'Courier New', monospace;
                    color: #059669;
                    font-weight: 600;
                }

                .mode-indicator {
                    margin-top: 20px;
                    padding: 15px;
                    border-radius: 8px;
                    font-size: 0.9rem;
                }

                .mode-supabase {
                    background: rgba(16, 185, 129, 0.1);
                    border: 1px solid rgba(16, 185, 129, 0.3);
                    color: #059669;
                }

                .mode-fallback {
                    background: rgba(245, 158, 11, 0.1);
                    border: 1px solid rgba(245, 158, 11, 0.3);
                    color: #d97706;
                }

                .error-message {
                    color: #dc2626;
                    margin-top: 15px;
                    padding: 10px;
                    background: rgba(220, 38, 38, 0.1);
                    border-radius: 8px;
                    display: none;
                }

                .back-link {
                    position: absolute;
                    top: 20px;
                    left: 20px;
                    color: white;
                    text-decoration: none;
                    padding: 10px 20px;
                    background: rgba(255,255,255,0.2);
                    border-radius: 25px;
                    backdrop-filter: blur(10px);
                    transition: all 0.3s ease;
                }

                .back-link:hover {
                    background: rgba(255,255,255,0.3);
                    transform: translateY(-2px);
                }
            </style>

            <a href="index.html" class="back-link">‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é</a>

            <div class="login-container">
                <h1 class="login-title">ü¶ä Light Fox</h1>
                <h2 class="login-subtitle">–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</h2>
                
                <form class="login-form" id="adminLoginForm">
                    <input type="email" class="login-input" id="adminEmail" placeholder="Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" required>
                    <input type="password" class="login-input" id="adminPassword" placeholder="–ü–∞—Ä–æ–ª—å" required>
                    <button type="submit" class="login-btn" id="loginBtn">–í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É</button>
                </form>

                <div class="error-message" id="loginError"></div>

                <div class="demo-info">
                    <h4>üîë –î–µ–º–æ –¥–æ—Å—Ç—É–ø:</h4>
                    <div class="demo-credentials">
                        <div class="credential-row">
                            <span class="credential-label">Email:</span>
                            <span class="credential-value">admin@lightfox.com</span>
                        </div>
                        <div class="credential-row">
                            <span class="credential-label">–ü–∞—Ä–æ–ª—å:</span>
                            <span class="credential-value">admin123</span>
                        </div>
                        <div class="credential-row">
                            <span class="credential-label">–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞:</span>
                            <span class="credential-value">demo@example.com / 123456</span>
                        </div>
                    </div>
                </div>

                <div class="mode-indicator ${isSupabaseMode ? 'mode-supabase' : 'mode-fallback'}">
                    ${isSupabaseMode ? 
                        'üóÑÔ∏è –†–µ–∂–∏–º: Supabase (—Å–µ—Ä–≤–µ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)' : 
                        'üíæ –†–µ–∂–∏–º: localStorage (–ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)'
                    }
                </div>
            </div>
        `;

        document.getElementById('adminLoginForm').addEventListener('submit', handleAdminLogin);
    }

    // –ü–æ–∫–∞–∑ –æ—Ç–∫–∞–∑–∞ –≤ –¥–æ—Å—Ç—É–ø–µ
    function showAccessDenied() {
        document.body.innerHTML = `
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: linear-gradient(135deg, #dc2626 0%, #991b1b 100%);
                    min-height: 100vh;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    padding: 20px;
                    color: white;
                    text-align: center;
                }
                .access-denied {
                    max-width: 400px;
                }
                .back-btn {
                    background: white;
                    color: #dc2626;
                    padding: 12px 24px;
                    border-radius: 8px;
                    text-decoration: none;
                    font-weight: 600;
                    margin-top: 20px;
                    display: inline-block;
                    transition: all 0.3s ease;
                }
                .back-btn:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 8px 20px rgba(0,0,0,0.3);
                }
            </style>
            <div class="access-denied">
                <h1 style="font-size: 4rem; margin-bottom: 1rem;">üö´</h1>
                <h2 style="margin-bottom: 1rem;">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h2>
                <p style="margin-bottom: 2rem;">–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</p>
                <a href="index.html" class="back-btn">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
            </div>
        `;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∞
    async function handleAdminLogin(e) {
        e.preventDefault();
        
        const email = document.getElementById('adminEmail').value.trim();
        const password = document.getElementById('adminPassword').value;
        const errorDiv = document.getElementById('loginError');
        const loginBtn = document.getElementById('loginBtn');

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
        errorDiv.style.display = 'none';
        loginBtn.disabled = true;
        loginBtn.textContent = '–í—Ö–æ–¥...';

        try {
            if (isSupabaseMode && window.supabase) {
                // Supabase –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                const { data, error } = await window.supabase.auth.signInWithPassword({
                    email,
                    password
                });

                if (error) throw error;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
                const { data: profile, error: profileError } = await window.supabase
                    .from('users')
                    .select('is_admin, username')
                    .eq('id', data.user.id)
                    .single();

                if (profileError || !profile?.is_admin) {
                    throw new Error('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
                }

                currentUser = { ...data.user, profile };
                isLoggedIn = true;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è fallback
                localStorage.setItem('admin_user', JSON.stringify({
                    email: email,
                    username: profile.username || 'Admin',
                    isAdmin: true,
                    mode: 'supabase'
                }));

            } else {
                // Fallback –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                const validCredentials = [
                    { email: 'admin@lightfox.com', password: 'admin123', username: 'Admin' },
                    { email: 'demo@example.com', password: '123456', username: 'DemoAdmin' }
                ];

                const validUser = validCredentials.find(cred => 
                    cred.email === email && cred.password === password
                );

                if (!validUser) {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
                }

                currentUser = {
                    email: validUser.email,
                    username: validUser.username,
                    isAdmin: true,
                    mode: 'fallback'
                };
                isLoggedIn = true;

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
                localStorage.setItem('admin_user', JSON.stringify(currentUser));
            }

            // –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
            initializeAdminPanel();

        } catch (error) {
            console.error('Login error:', error);
            errorDiv.textContent = '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + error.message;
            errorDiv.style.display = 'block';
        } finally {
            loginBtn.disabled = false;
            loginBtn.textContent = '–í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É';
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    function initializeAdminPanel() {
        createAdminInterface();
        loadDashboard();
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞–¥–º–∏–Ω–∫–∏
    function createAdminInterface() {
        document.body.innerHTML = `
            <style>
                * {
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }

                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background-color: #f8fafc;
                    color: #1e293b;
                    line-height: 1.6;
                    min-height: 100vh;
                }

                .admin-header {
                    position: fixed;
                    top: 0;
                    left: 0;
                    right: 0;
                    height: 70px;
                    background: white;
                    border-bottom: 2px solid #dc2626;
                    display: flex;
                    align-items: center;
                    padding: 0 24px;
                    z-index: 1000;
                    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                }

                .admin-logo {
                    font-size: 1.5rem;
                    font-weight: 800;
                    color: #dc2626;
                    margin-right: 24px;
                }

                .admin-nav {
                    display: flex;
                    gap: 20px;
                    margin-right: auto;
                    flex-wrap: wrap;
                }

                .nav-btn {
                    padding: 8px 16px;
                    background: transparent;
                    border: 1px solid #e2e8f0;
                    border-radius: 6px;
                    color: #1e293b;
                    cursor: pointer;
                    font-size: 0.875rem;
                    font-weight: 500;
                    transition: all 0.2s;
                }

                .nav-btn:hover {
                    border-color: #dc2626;
                    background-color: rgba(220, 38, 38, 0.05);
                }

                .nav-btn.active {
                    background: #dc2626;
                    color: white;
                    border-color: #dc2626;
                }

                .admin-controls {
                    display: flex;
                    align-items: center;
                    gap: 12px;
                    font-size: 0.875rem;
                }

                .mode-indicator {
                    padding: 4px 8px;
                    border-radius: 12px;
                    font-size: 0.75rem;
                    font-weight: 600;
                }

                .mode-supabase {
                    background: rgba(16, 185, 129, 0.1);
                    color: #059669;
                }

                .mode-fallback {
                    background: rgba(245, 158, 11, 0.1);
                    color: #d97706;
                }

                .logout-btn {
                    background: #dc2626;
                    color: white;
                    border: none;
                    padding: 8px 16px;
                    border-radius: 6px;
                    cursor: pointer;
                    font-size: 0.875rem;
                    font-weight: 500;
                    transition: all 0.2s;
                }

                .logout-btn:hover {
                    background: #b91c1c;
                }

                .main-content {
                    margin-top: 70px;
                    padding: 24px;
                    min-height: calc(100vh - 70px);
                }

                .container {
                    max-width: 1400px;
                    margin: 0 auto;
                }

                .content-section {
                    background: white;
                    border-radius: 12px;
                    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                    overflow: hidden;
                    margin-bottom: 24px;
                    display: none;
                }

                .content-section.active {
                    display: block;
                }

                .section-header {
                    padding: 20px 24px;
                    border-bottom: 1px solid #e2e8f0;
                    display: flex;
                    align-items: center;
                    justify-content: space-between;
                }

                .section-title {
                    font-size: 1.25rem;
                    font-weight: 700;
                    color: #1e293b;
                }

                .section-content {
                    padding: 24px;
                }

                .dashboard-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                    gap: 20px;
                    margin-bottom: 30px;
                }

                .stat-card {
                    background: white;
                    padding: 20px;
                    border-radius: 12px;
                    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                    text-align: center;
                    border: 1px solid #e2e8f0;
                }

                .stat-number {
                    font-size: 2rem;
                    font-weight: bold;
                    color: #dc2626;
                    margin-bottom: 8px;
                }

                .stat-label {
                    color: #64748b;
                    font-size: 0.875rem;
                }

                .loading {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    padding: 40px;
                    color: #64748b;
                }

                .spinner {
                    width: 32px;
                    height: 32px;
                    border: 3px solid #e2e8f0;
                    border-top: 3px solid #dc2626;
                    border-radius: 50%;
                    animation: spin 1s linear infinite;
                    margin-right: 16px;
                }

                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }

                .error {
                    color: #dc2626;
                    text-align: center;
                    padding: 20px;
                    background: rgba(220, 38, 38, 0.1);
                    border-radius: 8px;
                    border: 1px solid rgba(220, 38, 38, 0.2);
                }

                .btn {
                    display: inline-flex;
                    align-items: center;
                    gap: 8px;
                    padding: 10px 16px;
                    border-radius: 8px;
                    font-size: 0.875rem;
                    font-weight: 600;
                    cursor: pointer;
                    border: none;
                    transition: all 0.2s;
                    text-decoration: none;
                }

                .btn-primary {
                    background: #dc2626;
                    color: white;
                }

                .btn-primary:hover {
                    background: #b91c1c;
                    transform: translateY(-1px);
                }

                .notification {
                    position: fixed;
                    top: 80px;
                    right: 20px;
                    padding: 12px 20px;
                    border-radius: 8px;
                    box-shadow: 0 10px 15px rgba(0,0,0,0.1);
                    z-index: 2000;
                    transform: translateX(100%);
                    transition: transform 0.3s ease;
                    max-width: 400px;
                    font-weight: 500;
                }

                .notification.show {
                    transform: translateX(0);
                }

                .notification.success {
                    background: #059669;
                    color: white;
                }

                .notification.error {
                    background: #dc2626;
                    color: white;
                }

                .notification.warning {
                    background: #d97706;
                    color: white;
                }

                @media (max-width: 768px) {
                    .admin-nav {
                        display: none;
                    }
                    
                    .admin-header {
                        flex-direction: column;
                        height: auto;
                        padding: 16px;
                    }
                    
                    .main-content {
                        margin-top: 120px;
                    }
                }
            </style>

            <!-- Admin Header -->
            <header class="admin-header">
                <div class="admin-logo">ü¶ä Light Fox Admin</div>
                <nav class="admin-nav">
                    <button class="nav-btn active" onclick="switchSection('dashboard')">üìä –î–∞—à–±–æ—Ä–¥</button>
                    <button class="nav-btn" onclick="switchSection('manga')">üìö –ú–∞–Ω–≥–∞</button>
                    <button class="nav-btn" onclick="switchSection('users')">üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</button>
                    <button class="nav-btn" onclick="switchSection('donations')">üí∞ –î–æ–Ω–∞—Ç—ã</button>
                    <button class="nav-btn" onclick="switchSection('comments')">üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</button>
                </nav>
                <div class="admin-controls">
                    <div class="mode-indicator ${isSupabaseMode ? 'mode-supabase' : 'mode-fallback'}">
                        ${isSupabaseMode ? 'üóÑÔ∏è Supabase' : 'üíæ localStorage'}
                    </div>
                    <span>üë§ ${currentUser.username || currentUser.email}</span>
                    <button class="logout-btn" onclick="adminLogout()">–í—ã–π—Ç–∏</button>
                </div>
            </header>

            <!-- Main Content -->
            <main class="main-content">
                <div class="container">
                    <!-- Dashboard Section -->
                    <section class="content-section active" id="dashboard-section">
                        <div class="section-header">
                            <h2 class="section-title">üìä –î–∞—à–±–æ—Ä–¥</h2>
                        </div>
                        <div class="section-content" id="dashboard-content">
                            <div class="loading">
                                <div class="spinner"></div>
                                –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...
                            </div>
                        </div>
                    </section>

                    <!-- Manga Section -->
                    <section class="content-section" id="manga-section">
                        <div class="section-header">
                            <h2 class="section-title">üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–Ω–≥–æ–π</h2>
                            <button class="btn btn-primary" onclick="showAddMangaForm()">
                                <span>‚ûï</span>
                                –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–π—Ç–ª
                            </button>
                        </div>
                        <div class="section-content" id="manga-content">
                            <!-- Content will be loaded here -->
                        </div>
                    </section>

                    <!-- Users Section -->
                    <section class="content-section" id="users-section">
                        <div class="section-header">
                            <h2 class="section-title">üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h2>
                        </div>
                        <div class="section-content" id="users-content">
                            <!-- Content will be loaded here -->
                        </div>
                    </section>

                    <!-- Donations Section -->
                    <section class="content-section" id="donations-section">
                        <div class="section-header">
                            <h2 class="section-title">üí∞ –î–æ–Ω–∞—Ç—ã</h2>
                        </div>
                        <div class="section-content" id="donations-content">
                            <!-- Content will be loaded here -->
                        </div>
                    </section>

                    <!-- Comments Section -->
                    <section class="content-section" id="comments-section">
                        <div class="section-header">
                            <h2 class="section-title">üí¨ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h2>
                        </div>
                        <div class="section-content" id="comments-content">
                            <!-- Content will be loaded here -->
                        </div>
                    </section>
                </div>
            </main>

            <!-- Notification -->
            <div class="notification" id="notification"></div>
        `;
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤
    function switchSection(section) {
        // Update nav buttons
        document.querySelectorAll('.nav-btn').forEach(btn => btn.classList.remove('active'));
        event.target.classList.add('active');

        // Update content sections
        document.querySelectorAll('.content-section').forEach(sec => sec.classList.remove('active'));
        document.getElementById(section + '-section').classList.add('active');

        currentSection = section;

        // Load section content
        switch(section) {
            case 'dashboard':
                loadDashboard();
                break;
            case 'manga':
                loadMangaManagement();
                break;
            case 'users':
                loadUsersManagement();
                break;
            case 'donations':
                loadDonationsManagement();
                break;
            case 'comments':
                loadCommentsModeration();
                break;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞
    async function loadDashboard() {
        const content = document.getElementById('dashboard-content');
        if (!content) return;

        try {
            let stats = {
                totalManga: 0,
                totalUsers: 0,
                totalComments: 0,
                totalDonations: 0
            };

            if (isSupabaseMode && window.supabase) {
                // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Supabase
                try {
                    const [mangaData, userData, commentData, donationData] = await Promise.all([
                        window.supabase.from('manga').select('id, current_donations').eq('is_active', true),
                        window.supabase.from('users').select('id, total_donations'),
                        window.supabase.from('comments').select('id'),
                        window.supabase.from('donations').select('amount').eq('status', 'completed')
                    ]);

                    stats.totalManga = mangaData.data?.length || 0;
                    stats.totalUsers = userData.data?.length || 0;
                    stats.totalComments = commentData.data?.length || 0;
                    stats.totalDonations = donationData.data?.reduce((sum, d) => sum + d.amount, 0) || 0;
                } catch (error) {
                    console.error('Supabase stats error:', error);
                    // Fallback –∫ localStorage
                    stats = getLocalStorageStats();
                }
            } else {
                // Fallback –∫ localStorage
                stats = getLocalStorageStats();
            }

            content.innerHTML = `
                <div class="dashboard-grid">
                    <div class="stat-card">
                        <div class="stat-number">${stats.totalManga}</div>
                        <div class="stat-label">–¢–∞–π—Ç–ª–æ–≤</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${stats.totalUsers}</div>
                        <div class="stat-label">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${stats.totalComments}</div>
                        <div class="stat-label">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${isSupabaseMode ? (stats.totalDonations / 100).toLocaleString() : stats.totalDonations.toLocaleString()}‚ÇΩ</div>
                        <div class="stat-label">–î–æ–Ω–∞—Ç–æ–≤</div>
                    </div>
                </div>

                <div style="margin-top: 30px; padding: 20px; background: white; border-radius: 12px; border: 1px solid #e2e8f0;">
                    <h3 style="margin-bottom: 15px;">üöÄ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h3>
                    <div style="display: grid; gap: 15px;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <span>üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</span>
                            <span style="color: ${isSupabaseMode ? '#059669' : '#d97706'}; font-weight: 600;">
                                ${isSupabaseMode ? '‚úÖ PostgreSQL (Supabase)' : '‚ö†Ô∏è localStorage (fallback)'}
                            </span>
                        </div>
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <span>üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:</span>
                            <span style="color: ${isSupabaseMode ? '#059669' : '#d97706'}; font-weight: 600;">
                                ${isSupabaseMode ? '‚úÖ JWT —Ç–æ–∫–µ–Ω—ã' : '‚ö†Ô∏è localStorage'}
                            </span>
                        </div>
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <span>üìÅ –§–∞–π–ª—ã:</span>
                            <span style="color: ${isSupabaseMode ? '#059669' : '#d97706'}; font-weight: 600;">
                                ${isSupabaseMode ? '‚úÖ Supabase Storage' : '‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã'}
                            </span>
                        </div>
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <span>üåç –ì–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞:</span>
                            <span style="color: ${isSupabaseMode ? '#059669' : '#d97706'}; font-weight: 600;">
                                ${isSupabaseMode ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ (KR,DE,CN,JP)' : '‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–∞'}
                            </span>
                        </div>
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <span>‚ö° Real-time:</span>
                            <span style="color: ${isSupabaseMode ? '#059669' : '#d97706'}; font-weight: 600;">
                                ${isSupabaseMode ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω'}
                            </span>
                        </div>
                    </div>
                    
                    ${!isSupabaseMode ? `
                        <div style="margin-top: 20px; padding: 15px; background: rgba(245, 158, 11, 0.1); border-radius: 8px; border: 1px solid rgba(245, 158, 11, 0.3);">
                            <h4 style="color: #d97706; margin-bottom: 10px;">‚ö†Ô∏è Fallback —Ä–µ–∂–∏–º</h4>
                            <p style="color: #d97706; font-size: 0.9rem;">
                                –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Supabase.
                            </p>
                        </div>
                    ` : `
                        <div style="margin-top: 20px; padding: 15px; background: rgba(16, 185, 129, 0.1); border-radius: 8px; border: 1px solid rgba(16, 185, 129, 0.3);">
                            <h4 style="color: #059669; margin-bottom: 10px;">‚úÖ –°–µ—Ä–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º</h4>
                            <p style="color: #059669; font-size: 0.9rem;">
                                –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Ä–µ–∑ Supabase. –ü–æ–ª–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
                            </p>
                        </div>
                    `}
                </div>
            `;

        } catch (error) {
            content.innerHTML = `
                <div class="error">
                    <h3>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</h3>
                    <p>${error.message}</p>
                    <button class="btn btn-primary" onclick="loadDashboard()" style="margin-top: 15px;">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                </div>
            `;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ localStorage
    function getLocalStorageStats() {
        const mangaData = window.MangaAPI ? window.MangaAPI.getAllManga() : [];
        const authSystem = window.AuthSystem;
        
        let totalComments = 0;
        mangaData.forEach(manga => {
            const comments = JSON.parse(localStorage.getItem(`comments_${manga.id}`) || '[]');
            totalComments += comments.length;
        });

        return {
            totalManga: mangaData.length,
            totalUsers: authSystem ? authSystem.users.length : 0,
            totalComments: totalComments,
            totalDonations: mangaData.reduce((sum, manga) => sum + (manga.currentDonations || 0), 0)
        };
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–Ω–≥–æ–π
    async function loadMangaManagement() {
        const content = document.getElementById('manga-content');
        if (!content) return;

        content.innerHTML = `
            <div class="loading">
                <div class="spinner"></div>
                –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π—Ç–ª–æ–≤...
            </div>
        `;

        try {
            let manga = [];

            if (isSupabaseMode && window.supabase) {
                const { data, error } = await window.supabase
                    .from('manga')
                    .select('*')
                    .order('created_at', { ascending: false });

                if (error) throw error;
                manga = data || [];
            } else {
                // Fallback –∫ MangaAPI
                manga = window.MangaAPI ? await window.MangaAPI.getAllManga() : [];
            }

            if (manga.length === 0) {
                content.innerHTML = `
                    <div style="text-align: center; padding: 40px; color: #64748b;">
                        <h3>üìö –¢–∞–π—Ç–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                        <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–∞–π—Ç–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
                        <button class="btn btn-primary" onclick="showAddMangaForm()" style="margin-top: 15px;">
                            ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–π—Ç–ª
                        </button>
                    </div>
                `;
                return;
            }

            content.innerHTML = `
                <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 20px;">
                    ${manga.map(item => `
                        <div style="background: white; border-radius: 12px; overflow: hidden; box-shadow: 0 1px 3px rgba(0,0,0,0.1); border: 1px solid #e2e8f0; transition: transform 0.2s;">
                            <div style="padding: 16px; border-bottom: 1px solid #e2e8f0;">
                                <div style="font-weight: 600; margin-bottom: 8px; color: #1e293b;">${item.title}</div>
                                <div style="color: #64748b; font-size: 0.875rem;">
                                    ${item.type} ‚Ä¢ ${item.status} ‚Ä¢ ${item.available_episodes || item.availableEpisodes || 0}/${item.total_episodes || item.totalEpisodes || 0} —Å–µ—Ä–∏–π
                                </div>
                                <div style="color: #64748b; font-size: 0.875rem; margin-top: 4px;">
                                    –î–æ–Ω–∞—Ç–æ–≤: ${(item.current_donations || item.currentDonations || 0).toLocaleString()}‚ÇΩ / ${(item.donation_goal || item.donationGoal || 10000).toLocaleString()}‚ÇΩ
                                </div>
                            </div>
                            <div style="padding: 16px; display: flex; gap: 8px;">
                                <button class="btn" style="background: #64748b; color: white; flex: 1;" onclick="editManga('${item.id}')">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                                <button class="btn" style="background: #dc2626; color: white;" onclick="deleteManga('${item.id}')">–£–¥–∞–ª–∏—Ç—å</button>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        } catch (error) {
            content.innerHTML = `
                <div class="error">
                    <h3>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–π—Ç–ª–æ–≤</h3>
                    <p>${error.message}</p>
                    <button class="btn btn-primary" onclick="loadMangaManagement()" style="margin-top: 15px;">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                </div>
            `;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    async function loadUsersManagement() {
        const content = document.getElementById('users-content');
        if (!content) return;

        content.innerHTML = `
            <div class="loading">
                <div class="spinner"></div>
                –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...
            </div>
        `;

        try {
            let users = [];

            if (isSupabaseMode && window.supabase) {
                const { data, error } = await window.supabase
                    .from('users')
                    .select('*')
                    .order('created_at', { ascending: false });

                if (error) throw error;
                users = data || [];
            } else {
                // Fallback –∫ AuthSystem
                users = window.AuthSystem ? window.AuthSystem.getAllUsers() : [];
            }

            content.innerHTML = `
                <div style="margin-bottom: 20px; padding: 16px; background: white; border-radius: 8px; border: 1px solid #e2e8f0;">
                    <div style="display: flex; gap: 20px; font-size: 0.875rem; color: #64748b;">
                        <span>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}</span>
                        <span>–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${users.filter(u => !u.is_banned && !u.isBanned).length}</span>
                        <span>–ê–¥–º–∏–Ω–æ–≤: ${users.filter(u => u.is_admin || u.isAdmin).length}</span>
                    </div>
                </div>

                <div style="display: flex; flex-direction: column; gap: 16px;">
                    ${users.map(user => `
                        <div style="background: white; border-radius: 12px; border: 1px solid #e2e8f0; overflow: hidden; transition: all 0.2s ease;">
                            <div style="padding: 16px; display: flex; align-items: center; gap: 16px;">
                                <div style="width: 50px; height: 50px; border-radius: 50%; background: #dc2626; color: white; display: flex; align-items: center; justify-content: center; font-weight: 600; font-size: 1.2rem; flex-shrink: 0;">
                                    ${(user.username || user.email || 'U').charAt(0).toUpperCase()}
                                </div>
                                <div style="flex: 1;">
                                    <div style="font-weight: 600; color: #1e293b; margin-bottom: 4px;">${user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</div>
                                    <div style="color: #64748b; font-size: 0.875rem; margin-bottom: 4px;">${user.email}</div>
                                    <div style="font-size: 0.75rem; color: #64748b;">
                                        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.created_at || user.registeredAt || Date.now()).toLocaleDateString('ru-RU')} ‚Ä¢ 
                                        –î–æ–Ω–∞—Ç–æ–≤: ${user.total_donations || user.stats?.totalDonations || 0}‚ÇΩ
                                    </div>
                                </div>
                                <div style="text-align: right;">
                                    <div style="padding: 4px 8px; border-radius: 12px; font-size: 0.75rem; font-weight: 500; ${(user.is_admin || user.isAdmin) ? 'background: rgba(220, 38, 38, 0.1); color: #dc2626;' : 'background: rgba(100, 116, 139, 0.1); color: #64748b;'}">
                                        ${(user.is_admin || user.isAdmin) ? '–ê–¥–º–∏–Ω' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                                    </div>
                                </div>
                            </div>
                            <div style="padding: 16px; display: flex; gap: 8px; border-top: 1px solid #e2e8f0;">
                                <button class="btn" style="background: #64748b; color: white;" onclick="editUser('${user.id}')">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                                ${!(user.is_admin || user.isAdmin) ? `
                                    <button class="btn" style="background: #f59e0b; color: white;" onclick="toggleUserBan('${user.id}', ${user.is_banned || user.isBanned || false})">
                                        ${(user.is_banned || user.isBanned) ? '–†–∞–∑–±–∞–Ω–∏—Ç—å' : '–ó–∞–±–∞–Ω–∏—Ç—å'}
                                    </button>
                                ` : ''}
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        } catch (error) {
            content.innerHTML = `
                <div class="error">
                    <h3>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
                    <p>${error.message}</p>
                    <button class="btn btn-primary" onclick="loadUsersManagement()" style="margin-top: 15px;">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                </div>
            `;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–Ω–∞—Ç–∞–º–∏
    async function loadDonationsManagement() {
        const content = document.getElementById('donations-content');
        if (!content) return;

        content.innerHTML = `
            <div class="loading">
                <div class="spinner"></div>
                –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–Ω–∞—Ç–æ–≤...
            </div>
        `;

        try {
            let donations = [];
            let totalAmount = 0;

            if (isSupabaseMode && window.supabase) {
                const { data, error } = await window.supabase
                    .from('donations')
                    .select(`
                        *,
                        user:users(username),
                        manga:manga(title)
                    `)
                    .order('created_at', { ascending: false })
                    .limit(50);

                if (error) throw error;
                donations = data || [];
                totalAmount = donations.reduce((sum, d) => sum + d.amount, 0);
            } else {
                // Fallback –∫ localStorage
                const donationHistory = JSON.parse(localStorage.getItem('donationHistory') || '[]');
                donations = donationHistory.map(d => ({
                    ...d,
                    user: { username: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' },
                    manga: { title: d.mangaTitle },
                    status: 'completed',
                    created_at: d.timestamp,
                    amount: d.amount
                }));
                totalAmount = donations.reduce((sum, d) => sum + (d.amount || 0), 0);
            }

            const completedDonations = donations.filter(d => d.status === 'completed');

            content.innerHTML = `
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px; margin-bottom: 20px;">
                    <div class="stat-card">
                        <div class="stat-number">${donations.length}</div>
                        <div class="stat-label">–í—Å–µ–≥–æ –¥–æ–Ω–∞—Ç–æ–≤</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${completedDonations.length}</div>
                        <div class="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${isSupabaseMode ? (totalAmount / 100).toLocaleString() : totalAmount.toLocaleString()}‚ÇΩ</div>
                        <div class="stat-label">–û–±—â–∞—è —Å—É–º–º–∞</div>
                    </div>
                </div>

                <div style="display: flex; flex-direction: column; gap: 12px;">
                    ${donations.slice(0, 20).map(donation => `
                        <div style="background: white; border-radius: 12px; border: 1px solid #e2e8f0; overflow: hidden;">
                            <div style="padding: 16px; display: flex; justify-content: space-between; align-items: center;">
                                <div>
                                    <div style="font-weight: 600; margin-bottom: 4px;">${donation.manga?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞–π—Ç–ª'}</div>
                                    <div style="color: #64748b; font-size: 0.875rem;">
                                        –û—Ç: ${donation.user?.username || '–ê–Ω–æ–Ω–∏–º'} ‚Ä¢ 
                                        ${isSupabaseMode ? (donation.amount / 100) : donation.amount}‚ÇΩ
                                    </div>
                                </div>
                                <div style="text-align: right;">
                                    <div style="padding: 4px 8px; border-radius: 12px; font-size: 0.75rem; font-weight: 500; background: rgba(16, 185, 129, 0.1); color: #059669;">
                                        ${donation.status || 'completed'}
                                    </div>
                                    <div style="font-size: 0.75rem; color: #64748b; margin-top: 4px;">
                                        ${new Date(donation.created_at).toLocaleString('ru-RU')}
                                    </div>
                                </div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        } catch (error) {
            content.innerHTML = `
                <div class="error">
                    <h3>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–Ω–∞—Ç–æ–≤</h3>
                    <p>${error.message}</p>
                    <button class="btn btn-primary" onclick="loadDonationsManagement()" style="margin-top: 15px;">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                </div>
            `;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    async function loadCommentsModeration() {
        const content = document.getElementById('comments-content');
        if (!content) return;

        content.innerHTML = `
            <div class="loading">
                <div class="spinner"></div>
                –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...
            </div>
        `;

        try {
            let comments = [];

            if (isSupabaseMode && window.supabase) {
                const { data, error } = await window.supabase
                    .from('comments')
                    .select(`
                        *,
                        user:users(username),
                        manga:manga(title)
                    `)
                    .order('created_at', { ascending: false })
                    .limit(50);

                if (error) throw error;
                comments = data || [];
            } else {
                // Fallback –∫ localStorage
                const allManga = window.MangaAPI ? await window.MangaAPI.getAllManga() : [];
                comments = [];
                
                allManga.forEach(manga => {
                    const mangaComments = JSON.parse(localStorage.getItem(`comments_${manga.id}`) || '[]');
                    mangaComments.forEach(comment => {
                        comments.push({
                            ...comment,
                            user: { username: comment.authorName },
                            manga: { title: manga.title },
                            is_moderated: true,
                            likes: comment.likes || 0,
                            content: comment.text,
                            created_at: comment.createdAt
                        });
                    });
                });
                
                comments.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            }

            if (comments.length === 0) {
                content.innerHTML = `
                    <div style="text-align: center; padding: 40px; color: #64748b;">
                        <h3>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                        <p>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</p>
                    </div>
                `;
                return;
            }

            content.innerHTML = `
                <div style="display: flex; flex-direction: column; gap: 16px;">
                    ${comments.map(comment => `
                        <div style="background: white; border-radius: 12px; border: 1px solid #e2e8f0; overflow: hidden;">
                            <div style="padding: 16px; display: flex; align-items: center; justify-content: space-between; border-bottom: 1px solid #e2e8f0;">
                                <div style="display: flex; align-items: center; gap: 12px;">
                                    <div style="width: 40px; height: 40px; border-radius: 50%; background: #dc2626; color: white; display: flex; align-items: center; justify-content: center; font-weight: 600; font-size: 1.2rem;">
                                        ${(comment.user?.username || '–ê').charAt(0).toUpperCase()}
                                    </div>
                                    <div>
                                        <div style="font-weight: 600; color: #1e293b;">${comment.user?.username || '–ê–Ω–æ–Ω–∏–º'}</div>
                                        <div style="font-size: 0.75rem; color: #64748b;">
                                            ${comment.manga?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞–π—Ç–ª'} ‚Ä¢ –°–µ—Ä–∏—è ${comment.episode_number || comment.episode || 1}
                                        </div>
                                    </div>
                                </div>
                                <div style="font-size: 0.75rem; color: #64748b;">${new Date(comment.created_at).toLocaleString('ru-RU')}</div>
                            </div>
                            <div style="padding: 16px; color: #1e293b; line-height: 1.5; border-bottom: 1px solid #e2e8f0;">
                                ${comment.content}
                            </div>
                            <div style="padding: 16px; display: flex; align-items: center; gap: 12px; flex-wrap: wrap;">
                                <div style="padding: 4px 8px; border-radius: 12px; font-size: 0.75rem; font-weight: 500; ${comment.is_moderated ? 'background: rgba(16, 185, 129, 0.1); color: #059669;' : 'background: rgba(245, 158, 11, 0.1); color: #d97706;'}">
                                    ${comment.is_moderated ? '‚úÖ –û–¥–æ–±—Ä–µ–Ω' : '‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'}
                                </div>
                                <span style="color: #64748b; font-size: 0.875rem;">üëç ${comment.likes}</span>
                                ${!comment.is_moderated ? `
                                    <button class="btn" style="background: #059669; color: white; font-size: 0.75rem; padding: 6px 12px;" onclick="approveComment('${comment.id}')">–û–¥–æ–±—Ä–∏—Ç—å</button>
                                    <button class="btn" style="background: #dc2626; color: white; font-size: 0.75rem; padding: 6px 12px;" onclick="rejectComment('${comment.id}')">–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
                                ` : ''}
                                <button class="btn" style="background: #dc2626; color: white; font-size: 0.75rem; padding: 6px 12px;" onclick="deleteComment('${comment.id}')">–£–¥–∞–ª–∏—Ç—å</button>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        } catch (error) {
            content.innerHTML = `
                <div class="error">
                    <h3>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h3>
                    <p>${error.message}</p>
                    <button class="btn btn-primary" onclick="loadCommentsModeration()" style="margin-top: 15px;">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                </div>
            `;
        }
    }

    // –û–¥–æ–±—Ä–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    async function approveComment(commentId) {
        try {
            if (isSupabaseMode && window.supabase) {
                const { error } = await window.supabase
                    .from('comments')
                    .update({ is_moderated: true })
                    .eq('id', commentId);

                if (error) throw error;
            }

            showNotification('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–¥–æ–±—Ä–µ–Ω', 'success');
            loadCommentsModeration();
        } catch (error) {
            showNotification('–û—à–∏–±–∫–∞: ' + error.message, 'error');
        }
    }

    // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    async function rejectComment(commentId) {
        try {
            if (isSupabaseMode && window.supabase) {
                const { error } = await window.supabase
                    .from('comments')
                    .update({ is_moderated: false })
                    .eq('id', commentId);

                if (error) throw error;
            }

            showNotification('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–∫–ª–æ–Ω–µ–Ω', 'warning');
            loadCommentsModeration();
        } catch (error) {
            showNotification('–û—à–∏–±–∫–∞: ' + error.message, 'error');
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    async function deleteComment(commentId) {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?')) return;

        try {
            if (isSupabaseMode && window.supabase) {
                const { error } = await window.supabase
                    .from('comments')
                    .delete()
                    .eq('id', commentId);

                if (error) throw error;
            }

            showNotification('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω', 'success');
            loadCommentsModeration();
        } catch (error) {
            showNotification('–û—à–∏–±–∫–∞: ' + error.message, 'error');
        }
    }

    // –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
    async function adminLogout() {
        try {
            if (isSupabaseMode && window.supabase) {
                await window.supabase.auth.signOut();
            }
            
            localStorage.removeItem('admin_user');
            window.location.href = 'index.html';
        } catch (error) {
            console.error('Logout error:', error);
            localStorage.removeItem('admin_user');
            window.location.href = 'index.html';
        }
    }

    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    function showNotification(message, type = 'success') {
        let notification = document.getElementById('notification');
        if (!notification) return;

        const colors = {
            success: '#059669',
            error: '#dc2626',
            warning: '#d97706'
        };

        notification.style.background = colors[type] || colors.success;
        notification.textContent = message;
        notification.classList.add('show');

        setTimeout(() => {
            notification.classList.remove('show');
        }, 3000);
    }

    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π (–±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ)
    function showAddMangaForm() {
        showNotification('–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞–Ω–≥–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏', 'warning');
    }

    function editManga(id) {
        showNotification('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏', 'warning');
    }

    function deleteManga(id) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —Ç–∞–π—Ç–ª?')) {
            showNotification('–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏', 'warning');
        }
    }

    function editUser(id) {
        showNotification('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏', 'warning');
    }

    function toggleUserBan(id, isBanned) {
        const action = isBanned ? '—Ä–∞–∑–±–∞–Ω–∏—Ç—å' : '–∑–∞–±–∞–Ω–∏—Ç—å';
        if (confirm(`${action} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?`)) {
            showNotification(`–§—É–Ω–∫—Ü–∏—è ${action} –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏`, 'warning');
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
    window.switchSection = switchSection;
    window.adminLogout = adminLogout;
    window.approveComment = approveComment;
    window.rejectComment = rejectComment;
    window.deleteComment = deleteComment;
    window.showAddMangaForm = showAddMangaForm;
    window.editManga = editManga;
    window.deleteManga = deleteManga;
    window.editUser = editUser;
    window.toggleUserBan = toggleUserBan;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    document.addEventListener('DOMContentLoaded', async function() {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...');
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º
        setTimeout(async () => {
            const hasAccess = await checkAdminAccess();
            if (hasAccess) {
                initializeAdminPanel();
            }
        }, 500);
    });

    console.log('üîß Admin Panel –∑–∞–≥—Ä—É–∂–µ–Ω–∞');

})();