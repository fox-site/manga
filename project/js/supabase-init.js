// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
(function() {
    'use strict';

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase (–±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    const SUPABASE_CONFIG = {
        url: 'https://xvwzqkxqkxqkxqkx.supabase.co',
        anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh2d3pxa3hxa3hxa3hxa3giLCJyb2xlIjoiYW5vbiIsImlhdCI6MTY0NjA2NzI2MCwiZXhwIjoxOTYxNjQzMjYwfQ.demo-key-replace-with-real'
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    function getSupabaseConfig() {
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const url = window.VITE_SUPABASE_URL || SUPABASE_CONFIG.url;
        const anonKey = window.VITE_SUPABASE_ANON_KEY || SUPABASE_CONFIG.anonKey;

        return { url, anonKey };
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
    async function initializeSupabase() {
        try {
            const config = getSupabaseConfig();

            if (!config.url || !config.anonKey || config.url.includes('your-project')) {
                console.warn('‚ö†Ô∏è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–∞–∂–º–∏—Ç–µ "Connect to Supabase" –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
                initializeFallback();
                return;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º Supabase SDK
            if (!window.supabase) {
                await loadSupabaseSDK();
            }

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            window.supabase = window.supabase.createClient(config.url, config.anonKey);
            window.SUPABASE_URL = config.url;
            window.SUPABASE_ANON_KEY = config.anonKey;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            const { error } = await window.supabase.auth.getSession();

            if (error) {
                console.warn('‚ö†Ô∏è Supabase auth not ready:', error);
                initializeFallback();
                return;
            }

            console.log('‚úÖ Supabase —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω');
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            window.dispatchEvent(new CustomEvent('supabaseReady', {
                detail: { client: window.supabase }
            }));

        } catch (error) {
            console.error('‚ùå Supabase initialization failed:', error);
            initializeFallback();
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ Supabase SDK
    async function loadSupabaseSDK() {
        return new Promise((resolve, reject) => {
            if (window.supabase) {
                resolve();
                return;
            }

            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2';
            script.onload = () => {
                console.log('üì¶ Supabase SDK –∑–∞–≥—Ä—É–∂–µ–Ω');
                resolve();
            };
            script.onerror = () => {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Supabase SDK');
                reject(new Error('Failed to load Supabase SDK'));
            };
            document.head.appendChild(script);
        });
    }

    // Fallback –∫ localStorage
    function initializeFallback() {
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –∫ localStorage');
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        window.supabase = {
            auth: {
                getUser: () => Promise.resolve({ data: { user: null } }),
                signUp: () => Promise.reject(new Error('Supabase not available')),
                signInWithPassword: () => Promise.reject(new Error('Supabase not available')),
                signOut: () => Promise.resolve(),
                onAuthStateChange: () => ({ data: { subscription: null } })
            },
            from: () => ({
                select: () => ({ eq: () => ({ single: () => Promise.resolve({ data: null, error: null }) }) }),
                insert: () => Promise.resolve({ data: null, error: null }),
                update: () => Promise.resolve({ data: null, error: null }),
                delete: () => Promise.resolve({ error: null })
            }),
            storage: {
                from: () => ({
                    upload: () => Promise.resolve({ error: null }),
                    getPublicUrl: () => ({ data: { publicUrl: '' } })
                })
            }
        };

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ fallback —Ä–µ–∂–∏–º–µ
        window.dispatchEvent(new CustomEvent('supabaseFallback', {
            detail: { reason: 'Configuration missing or connection failed' }
        }));
    }

    // –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeSupabase);
    } else {
        initializeSupabase();
    }

    console.log('üöÄ Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞...');

})();